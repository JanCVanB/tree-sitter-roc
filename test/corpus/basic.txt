================================================================================
variables
================================================================================
string="hi"
string = "hi"
num=1

--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (string)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (string)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (int))))

================================================================================
opaque tag pattern
================================================================================
bfs = \isTarget, root, @Graph graph ->
    bfsHelper isTarget [root] (Set.single root) graph
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier))
        (tag_pattern
          (opaque_tag)
          (identifier_pattern
            (long_identifier
              (identifier)))))
      (arrow)
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier)))
          (list_expression
            (long_identifier_or_op
              (long_identifier
                (identifier))))
          (paren_expression
            (application_expression
              (long_identifier_or_op
                (long_identifier
                  (module)
                  (identifier)))
              (args
                (long_identifier_or_op
                  (long_identifier
                    (identifier))))))
          (long_identifier_or_op
            (long_identifier
              (identifier))))))))

================================================================================
tag pattern
================================================================================
bfs = \isTarget, root, Graph graph ->
    bfsHelper isTarget [root] (Set.single root) graph

--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier))
        (tag_pattern
          (tag)
          (identifier_pattern
            (long_identifier
              (identifier)))))
      (arrow)
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier)))
          (list_expression
            (long_identifier_or_op
              (long_identifier
                (identifier))))
          (paren_expression
            (application_expression
              (long_identifier_or_op
                (long_identifier
                  (module)
                  (identifier)))
              (args
                (long_identifier_or_op
                  (long_identifier
                    (identifier))))))
          (long_identifier_or_op
            (long_identifier
              (identifier))))))))

================================================================================
opaque type
================================================================================
Graph a := Dict a (List a) where a implements Eq
--------------------------------------------------------------------------------

(file
  (opaque
    (apply_type
      (concrete_type)
      (apply_type_args
        (apply_type_arg
          (bound_variable))))
    (type_annotation
      (apply_type
        (concrete_type)
        (apply_type_args
          (apply_type_arg
            (bound_variable))
          (apply_type_arg
            (apply_type
              (concrete_type)
              (apply_type_args
                (apply_type_arg
                  (bound_variable)))))
          (apply_type_arg
            (bound_variable))
          (apply_type_arg
            (bound_variable))
          (apply_type_arg
            (bound_variable))
          (apply_type_arg
            (apply_type
              (concrete_type))))))))

================================================================================
arithmatic
================================================================================
num=1+1
num2 = 1 + num

num3 = 1 + num2
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (infix_expression
      (const
        (int))
      (infix_op)
      (const
        (int))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (infix_expression
      (const
        (int))
      (infix_op)
      (long_identifier_or_op
        (long_identifier
          (identifier)))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (infix_expression
      (const
        (int))
      (infix_op)
      (long_identifier_or_op
        (long_identifier
          (identifier))))))

================================================================================
functions with patterns
================================================================================
add = \num1, num2 ->
    when num1 is
      1-> 1
      2-> 
        a<- p a
        b=
          a a
        c<- p a
        \num->a
      _-> \num3->4


--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier)))
      (arrow)
      (when_is_expression
        (when)
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (is)
        (rules
          (rule
            (const_pattern
              (int))
            (arrow)
            (const
              (int)))
          (rule
            (const_pattern
              (int))
            (arrow)
            (backpassing_expression
              (identifier_pattern
                (long_identifier
                  (identifier)))
              (back_arrow)
              (application_expression
                (long_identifier_or_op
                  (long_identifier
                    (identifier)))
                (args
                  (long_identifier_or_op
                    (long_identifier
                      (identifier))))))
            (value_declaration
              (value_declaration_left
                (identifier_pattern
                  (long_identifier
                    (identifier))))
              (application_expression
                (long_identifier_or_op
                  (long_identifier
                    (identifier)))
                (args
                  (long_identifier_or_op
                    (long_identifier
                      (identifier))))))
            (backpassing_expression
              (identifier_pattern
                (long_identifier
                  (identifier)))
              (back_arrow)
              (application_expression
                (long_identifier_or_op
                  (long_identifier
                    (identifier)))
                (args
                  (long_identifier_or_op
                    (long_identifier
                      (identifier))))))
            (fun_expression
              (backslash)
              (argument_patterns
                (long_identifier
                  (identifier)))
              (arrow)
              (long_identifier_or_op
                (long_identifier
                  (identifier)))))
          (rule
            (wildcard_pattern)
            (arrow)
            (fun_expression
              (backslash)
              (argument_patterns
                (long_identifier
                  (identifier)))
              (arrow)
              (const
                (int)))))))))

================================================================================
pipe_new
================================================================================
main=
  a b
  |> c

main=
  a b
    |> c a
    |> d b
  g 10
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (long_identifier_or_op
          (long_identifier
            (identifier)))))
    (infix_newline
      (infix_op
        (symbolic_op))
      (long_identifier_or_op
        (long_identifier
          (identifier)))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (infix_expression
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier)))))
      (infix_op
        (symbolic_op))
      (infix_expression
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (identifier)))
          (args
            (long_identifier_or_op
              (long_identifier
                (identifier)))))
        (infix_op
          (symbolic_op))
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (identifier)))
          (args
            (long_identifier_or_op
              (long_identifier
                (identifier)))))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (const
          (int))))))

================================================================================
functions basic
================================================================================

a = Task.await b

a = add 1 1
adda=
  add2 = (\num1,num2-> num1)

  add2 a b a b c


add = \num1, num2 ->
	sum = num1 +num2

main = \filename ->
    onFail b \ e, e -> Stdout.line "Ran into problem:"


--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (module)
          (identifier)))
      (args
        (long_identifier_or_op
          (long_identifier
            (identifier))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (const
          (int))
        (const
          (int)))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (value_declaration
      (value_declaration_left
        (identifier_pattern
          (long_identifier
            (identifier))))
      (paren_expression
        (fun_expression
          (backslash)
          (argument_patterns
            (long_identifier
              (identifier))
            (long_identifier
              (identifier)))
          (arrow)
          (long_identifier_or_op
            (long_identifier
              (identifier))))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier)))
      (arrow)
      (value_declaration
        (value_declaration_left
          (identifier_pattern
            (long_identifier
              (identifier))))
        (infix_expression
          (long_identifier_or_op
            (long_identifier
              (identifier)))
          (infix_op)
          (long_identifier_or_op
            (long_identifier
              (identifier)))))
      (value_declaration
        (value_declaration_left
          (identifier_pattern
            (long_identifier
              (identifier))))
        (fun_expression
          (backslash)
          (argument_patterns
            (long_identifier
              (identifier)))
          (arrow)
          (application_expression
            (long_identifier_or_op
              (long_identifier
                (identifier)))
            (args
              (long_identifier_or_op
                (long_identifier
                  (identifier)))
              (fun_expression
                (backslash)
                (argument_patterns
                  (long_identifier
                    (identifier))
                  (long_identifier
                    (identifier)))
                (arrow)
                (application_expression
                  (long_identifier_or_op
                    (long_identifier
                      (module)
                      (identifier)))
                  (args
                    (const
                      (string))))))))))))

================================================================================
expressions
================================================================================
a=
  func a b c d e f
sum =
    a= num1 +num2
    a

maybe =
    if true then
        1
    else 
        0

--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (long_identifier_or_op
          (long_identifier
            (identifier))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (value_declaration
      (value_declaration_left
        (identifier_pattern
          (long_identifier
            (identifier))))
      (infix_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (infix_op)
        (long_identifier_or_op
          (long_identifier
            (identifier)))))
    (long_identifier_or_op
      (long_identifier
        (identifier))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (if_expression
      (const)
      (const
        (int)))
    (else_expression
      (const
        (int)))))

================================================================================
backpassing
================================================================================

main =
    _ <- await (Stdout.line ".")

interpretFile = \filename ->
    ctx <- Context.with filename

    result <- Task.attempt (interpretCtx ctx)

    Task.fail (StringErr "Hit end of data while still parsing something")
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (backpassing_expression
      (wildcard_pattern)
      (back_arrow)
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (paren_expression
            (application_expression
              (long_identifier_or_op
                (long_identifier
                  (module)
                  (identifier)))
              (args
                (const
                  (string)))))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier)))
      (arrow)
      (backpassing_expression
        (identifier_pattern
          (long_identifier
            (identifier)))
        (back_arrow)
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (module)
              (identifier)))
          (args
            (long_identifier_or_op
              (long_identifier
                (identifier))))))
      (backpassing_expression
        (identifier_pattern
          (long_identifier
            (identifier)))
        (back_arrow)
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (module)
              (identifier)))
          (args
            (paren_expression
              (application_expression
                (long_identifier_or_op
                  (long_identifier
                    (identifier)))
                (args
                  (long_identifier_or_op
                    (long_identifier
                      (identifier)))))))))
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (module)
            (identifier)))
        (args
          (paren_expression
            (application_expression
              (tag_expression
                (module))
              (args
                (const
                  (string))))))))))

================================================================================
records basic
================================================================================
user= {
    email: "hi",
    firstName: "hey",
    lastName: 1,
    lastName: 1+1,
    lastName:( 1*1)+1,
}
newScope = { scope & whileInfo }
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (record
      (record_field_expr
        (const
          (string)))
      (record_field_expr
        (const
          (string)))
      (record_field_expr
        (const
          (int)))
      (record_field_expr
        (infix_expression
          (const
            (int))
          (infix_op)
          (const
            (int))))
      (record_field_expr
        (infix_expression
          (paren_expression
            (infix_expression
              (const
                (int))
              (infix_op
                (symbolic_op))
              (const
                (int))))
          (infix_op)
          (const
            (int))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (record_update
      (record_field_expr))))

================================================================================
records complex
================================================================================

main=
  Task.succeed (Step { popCtx & scopes: List.set ctx.scopes last newScope })

  when popNumber ctx is
      Ok (T popCtx n) ->
        if n == 0 then
            newScope = { scope & whileInfo: None }

            Task.succeed (Step { popCtx & scopes: List.set ctx.scopes last newScope })
        else
            newScope = { scope & whileInfo: Some { state: InBody, body, cond } }

            Task.succeed (Step { popCtx & scopes: List.append (List.set ctx.scopes last newScope) { data: None, buf: body, index: 0, whileInfo: None } })
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (module)
          (identifier)))
      (args
        (paren_expression
          (application_expression
            (tag_expression
              (module))
            (args
              (record_update
                (record_field_expr
                  (application_expression
                    (dot_expression
                      (application_expression
                        (long_identifier_or_op
                          (long_identifier
                            (module)
                            (identifier)))
                        (args
                          (long_identifier_or_op
                            (long_identifier
                              (identifier)))))
                      (long_identifier_or_op
                        (long_identifier
                          (identifier))))
                    (args
                      (long_identifier_or_op
                        (long_identifier
                          (identifier)))))
                  (long_identifier_or_op
                    (long_identifier
                      (identifier))))))))))
    (when_is_expression
      (when)
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier)))))
      (is)
      (rules
        (rule
          (tag_pattern
            (tag)
            (paren_pattern
              (tag_pattern
                (tag)
                (identifier_pattern
                  (long_identifier
                    (identifier))
                  (identifier_pattern
                    (long_identifier
                      (identifier)))))))
          (arrow)
          (if_expression
            (infix_expression
              (long_identifier_or_op
                (long_identifier
                  (identifier)))
              (infix_op)
              (const
                (int)))
            (application_expression
              (dot_expression
                (value_declaration
                  (value_declaration_left
                    (identifier_pattern
                      (long_identifier
                        (identifier))))
                  (record_update
                    (record_field_expr
                      (tag_expression
                        (module)))))
                (ERROR)
                (long_identifier_or_op
                  (long_identifier
                    (identifier))))
              (args
                (paren_expression
                  (application_expression
                    (tag_expression
                      (module))
                    (args
                      (record_update
                        (record_field_expr
                          (application_expression
                            (dot_expression
                              (application_expression
                                (long_identifier_or_op
                                  (long_identifier
                                    (module)
                                    (identifier)))
                                (args
                                  (long_identifier_or_op
                                    (long_identifier
                                      (identifier)))))
                              (long_identifier_or_op
                                (long_identifier
                                  (identifier))))
                            (args
                              (long_identifier_or_op
                                (long_identifier
                                  (identifier)))))
                          (long_identifier_or_op
                            (long_identifier
                              (identifier)))))))))))
          (else_expression
            (value_declaration
              (value_declaration_left
                (identifier_pattern
                  (long_identifier
                    (identifier))))
              (record_update
                (record_field_expr
                  (application_expression
                    (tag_expression
                      (module))
                    (args
                      (record
                        (record_field_expr
                          (tag_expression
                            (module)))
                        (record_field_expr)
                        (record_field_expr)))))))
            (application_expression
              (long_identifier_or_op
                (long_identifier
                  (module)
                  (identifier)))
              (args
                (paren_expression
                  (application_expression
                    (tag_expression
                      (module))
                    (args
                      (record_update
                        (record_field_expr
                          (application_expression
                            (long_identifier_or_op
                              (long_identifier
                                (module)
                                (identifier)))
                            (args
                              (paren_expression
                                (application_expression
                                  (dot_expression
                                    (application_expression
                                      (long_identifier_or_op
                                        (long_identifier
                                          (module)
                                          (identifier)))
                                      (args
                                        (long_identifier_or_op
                                          (long_identifier
                                            (identifier)))))
                                    (long_identifier_or_op
                                      (long_identifier
                                        (identifier))))
                                  (args
                                    (long_identifier_or_op
                                      (long_identifier
                                        (identifier)))
                                    (long_identifier_or_op
                                      (long_identifier
                                        (identifier))))))))
                          (record
                            (record_field_expr
                              (tag_expression
                                (module)))
                            (record_field_expr
                              (long_identifier_or_op
                                (long_identifier
                                  (identifier))))
                            (record_field_expr
                              (const
                                (int)))
                            (record_field_expr
                              (tag_expression
                                (module)))))))))))))))))

================================================================================
val_infix
================================================================================
main =
  val =
    val2
  a
  |>b
  |>p a 
  |>b
  a
m=
  a
  |>b
  |>p a 
  |>b
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (value_declaration
      (value_declaration_left
        (identifier_pattern
          (long_identifier
            (identifier))))
      (long_identifier_or_op
        (long_identifier
          (identifier))))
    (long_identifier_or_op
      (long_identifier
        (identifier)))
    (infix_newline
      (infix_op
        (symbolic_op))
      (long_identifier_or_op
        (long_identifier
          (identifier))))
    (infix_newline
      (infix_op
        (symbolic_op))
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier))))))
    (infix_newline
      (infix_op
        (symbolic_op))
      (long_identifier_or_op
        (long_identifier
          (identifier))))
    (long_identifier_or_op
      (long_identifier
        (identifier))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (long_identifier_or_op
      (long_identifier
        (identifier)))
    (infix_newline
      (infix_op
        (symbolic_op))
      (long_identifier_or_op
        (long_identifier
          (identifier))))
    (infix_newline
      (infix_op
        (symbolic_op))
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier))))))
    (infix_newline
      (infix_op
        (symbolic_op))
      (long_identifier_or_op
        (long_identifier
          (identifier))))))

================================================================================
list_lit
================================================================================
navLinks = ["",""]

main=
  a [] [
    "",
    ""
  ]
navLinks = [
    { url: "subFolder/apple.html", title: "Exempli Gratia Pagina Pomi", text: "Apple" },
    { url: "banana.html", title: "Exempli Gratia Pagina Musa", text: "Banana" },
    { url: "cherry.html", title: "Exempli Pagina Cerasus", text: "Cherry" },
]


--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (list_expression
      (const
        (string))
      (const
        (string))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (list_expression)
        (list_expression
          (const
            (string))
          (const
            (string))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (list_expression
      (record
        (record_field_expr
          (const
            (string)))
        (record_field_expr
          (const
            (string)))
        (record_field_expr
          (const
            (string))))
      (record
        (record_field_expr
          (const
            (string)))
        (record_field_expr
          (const
            (string)))
        (record_field_expr
          (const
            (string))))
      (record
        (record_field_expr
          (const
            (string)))
        (record_field_expr
          (const
            (string)))
        (record_field_expr
          (const
            (string)))))))

================================================================================
odd functions
================================================================================
main=
  main = 
   when a is
      1-> 
        if a then
          b b
          |> b a
          |> b p
        else 
          c
      2-> hi

  h=10
  h
main2= a b
 


--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (value_declaration
      (value_declaration_left
        (identifier_pattern
          (long_identifier
            (identifier))))
      (when_is_expression
        (when)
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (is)
        (rules
          (rule
            (const_pattern
              (int))
            (arrow)
            (if_expression
              (long_identifier_or_op
                (long_identifier
                  (identifier)))
              (infix_expression
                (application_expression
                  (long_identifier_or_op
                    (long_identifier
                      (identifier)))
                  (args
                    (long_identifier_or_op
                      (long_identifier
                        (identifier)))))
                (infix_op
                  (symbolic_op))
                (infix_expression
                  (application_expression
                    (long_identifier_or_op
                      (long_identifier
                        (identifier)))
                    (args
                      (long_identifier_or_op
                        (long_identifier
                          (identifier)))))
                  (infix_op
                    (symbolic_op))
                  (application_expression
                    (long_identifier_or_op
                      (long_identifier
                        (identifier)))
                    (args
                      (long_identifier_or_op
                        (long_identifier
                          (identifier))))))))
            (else_expression
              (long_identifier_or_op
                (long_identifier
                  (identifier)))))
          (rule
            (const_pattern
              (int))
            (arrow)
            (long_identifier_or_op
              (long_identifier
                (identifier)))))))
    (value_declaration
      (value_declaration_left
        (identifier_pattern
          (long_identifier
            (identifier))))
      (const
        (int)))
    (long_identifier_or_op
      (long_identifier
        (identifier))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (long_identifier_or_op
          (long_identifier
            (identifier)))))))

================================================================================
when is
================================================================================
main=
    when color is
        Blue -> 1
        Green | Red | Yellow -> 2
        Purple -> 3

--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (when_is_expression
      (when)
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (is)
      (rules
        (rule
          (tag_pattern
            (tag))
          (arrow)
          (const
            (int)))
        (rule
          (disjunct_pattern
            (disjunct_pattern
              (tag_pattern
                (tag))
              (tag_pattern
                (tag)))
            (tag_pattern
              (tag)))
          (arrow)
          (const
            (int)))
        (rule
          (tag_pattern
            (tag))
          (arrow)
          (const
            (int)))))))

================================================================================
types simple
================================================================================

ReadErr : InternalDir.ReadErr
DeleteErr : InternalDir.DeleteErr

func : string,int-> int
func = \ a, b-> 1

func2 : string,(int->int)-> int
func2 = \ a, b-> b 1

main : Task {} [ ]
main = task a

transformFileContent : Str, Str -> Str
transformFileContent = \currentUrl, htmlContent ->
    List.findFirst navLinks (\{ url } -> url == currentUrl)
    |> Result.map (\currentNavLink -> view currentNavLink htmlContent)
    |> Result.map Html.render
    |> Result.withDefault ""
--------------------------------------------------------------------------------

(file
  (alias
    (apply_type
      (concrete_type))
    (type_annotation
      (apply_type
        (concrete_type))))
  (alias
    (apply_type
      (concrete_type))
    (type_annotation
      (apply_type
        (concrete_type))))
  (annotation
    (annotation_pre_colon)
    (type_annotation
      (function_type
        (bound_variable)
        (bound_variable)
        (arrow)
        (bound_variable))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier)))
      (arrow)
      (const
        (int))))
  (annotation
    (annotation_pre_colon)
    (type_annotation
      (function_type
        (bound_variable)
        (function_type
          (bound_variable)
          (arrow)
          (bound_variable))
        (arrow)
        (bound_variable))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier)))
      (arrow)
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (identifier)))
        (args
          (const
            (int))))))
  (annotation
    (annotation_pre_colon)
    (type_annotation
      (apply_type
        (concrete_type)
        (apply_type_args
          (apply_type_arg
            (record_type))
          (apply_type_arg
            (tags_type))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (application_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (args
        (long_identifier_or_op
          (long_identifier
            (identifier))))))
  (annotation
    (annotation_pre_colon)
    (type_annotation
      (function_type
        (apply_type
          (concrete_type))
        (apply_type
          (concrete_type))
        (arrow)
        (apply_type
          (concrete_type)))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier)))
      (arrow)
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (module)
            (identifier)))
        (args
          (long_identifier_or_op
            (long_identifier
              (identifier)))
          (paren_expression
            (fun_expression
              (backslash)
              (argument_patterns
                (record_pattern
                  (record
                    (record_field_expr))))
              (arrow)
              (infix_expression
                (long_identifier_or_op
                  (long_identifier
                    (identifier)))
                (infix_op)
                (long_identifier_or_op
                  (long_identifier
                    (identifier))))))))
      (infix_newline
        (infix_op
          (symbolic_op))
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (module)
              (identifier)))
          (args
            (paren_expression
              (fun_expression
                (backslash)
                (argument_patterns
                  (long_identifier
                    (identifier)))
                (arrow)
                (application_expression
                  (long_identifier_or_op
                    (long_identifier
                      (identifier)))
                  (args
                    (long_identifier_or_op
                      (long_identifier
                        (identifier)))
                    (long_identifier_or_op
                      (long_identifier
                        (identifier))))))))))
      (infix_newline
        (infix_op
          (symbolic_op))
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (module)
              (identifier)))
          (args
            (long_identifier_or_op
              (long_identifier
                (module)
                (identifier))))))
      (infix_newline
        (infix_op
          (symbolic_op))
        (application_expression
          (long_identifier_or_op
            (long_identifier
              (module)
              (identifier)))
          (args
            (const
              (string))))))))

================================================================================
pipe
================================================================================

main=
  a
  |> List.map \ b->b+1

--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (long_identifier_or_op
      (long_identifier
        (identifier)))
    (infix_newline
      (infix_op
        (symbolic_op))
      (application_expression
        (long_identifier_or_op
          (long_identifier
            (module)
            (identifier)))
        (args
          (fun_expression
            (backslash)
            (argument_patterns
              (long_identifier
                (identifier)))
            (arrow)
            (infix_expression
              (long_identifier_or_op
                (long_identifier
                  (identifier)))
              (infix_op)
              (const
                (int)))))))))

================================================================================
type annotation complex
================================================================================

findOneArg : Str, Str, MarkedArgs -> Result { val : Str, newlyTaken : Taken } [NotFound]
findOneArg = \long, short, { args, taken } -> ()

--------------------------------------------------------------------------------

(file
  (annotation
    (annotation_pre_colon)
    (type_annotation
      (function_type
        (apply_type
          (concrete_type))
        (apply_type
          (concrete_type))
        (apply_type
          (concrete_type))
        (arrow)
        (apply_type
          (concrete_type)
          (apply_type_args
            (apply_type_arg
              (record_type
                (record_field_type
                  (ident)
                  (type_annotation
                    (apply_type
                      (concrete_type))))
                (record_field_type
                  (ident)
                  (type_annotation
                    (apply_type
                      (concrete_type))))))
            (apply_type_arg
              (tags_type
                (apply_type
                  (concrete_type)))))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier))
        (long_identifier
          (identifier))
        (record_pattern
          (record
            (record_field_expr)
            (record_field_expr))))
      (arrow)
      (const
        (unit)))))

================================================================================
infix
================================================================================
a= a>=b
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (infix_expression
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (infix_op)
      (long_identifier_or_op
        (long_identifier
          (identifier))))))

================================================================================
literal
================================================================================
t=0xff
t=0xff
t=0b001
t=0b00_10

t=1u8

t=1u128
t=1i128
t=1i8
t=1.1
t=1.1f32
t=1.1dec
t=1nat
b="a"
b=""
b="p \( hi )"
b="p \n \( hi )"
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (xint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (xint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (xint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (xint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (uint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (uint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (iint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (iint)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (float)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (float)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (decimal)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (natural)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (string)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (string)))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (string
        (interpolation_char
          (ident)))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (string
        (escape_char)
        (interpolation_char
          (ident))))))

================================================================================
record pattern
================================================================================
main=
  when a is 
    Some { state: InCond, body, cond } -> b
--------------------------------------------------------------------------------

(file
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (when_is_expression
      (when)
      (long_identifier_or_op
        (long_identifier
          (identifier)))
      (is)
      (rules
        (rule
          (tag_pattern
            (tag)
            (record
              (record_field_expr
                (tag_expression
                  (module)))
              (record_field_expr)
              (record_field_expr)))
          (arrow)
          (long_identifier_or_op
            (long_identifier
              (identifier))))))))

================================================================================
interface module
================================================================================

interface Dir
    exposes [ReadErr, DeleteErr, DirEntry, deleteEmptyDir, deleteRecursive, list]
    imports [Effect, pf.Task.Task.{ Task }, InternalTask, Path.{ Path }, InternalPath, InternalDir]

a=10

--------------------------------------------------------------------------------

(file
  (interface_header
    (name)
    (interface_header_body
      (exposes
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident))
      (imports
        (imports_entry
          (long_module_name
            (module)))
        (imports_entry
          (identifier)
          (long_module_name
            (module))
          (exposes_list
            (ident)))
        (imports_entry
          (long_module_name
            (module)))
        (imports_entry
          (long_module_name
            (module))
          (exposes_list
            (ident)))
        (imports_entry
          (long_module_name
            (module)))
        (imports_entry
          (long_module_name
            (module))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (int))))

================================================================================
interf_prob
================================================================================

interface Dir
    exposes [ReadErr, DeleteErr, DirEntry, deleteEmptyDir, deleteRecursive, list]
    imports[Effect, Task.{ Task }, InternalTask, Path.{ Path }, InternalPath, InternalDir]

AA: AA.BB
BB : AA.BB
CC : AA.BB


## com
a : A -> TASK (List Path) [DirReadErr Path ReadErr]
a = \path ->
  a

--------------------------------------------------------------------------------

(file
  (interface_header
    (name)
    (interface_header_body
      (exposes
        (ident)
        (ident)
        (ident)
        (ident)
        (ident)
        (ident))
      (imports
        (imports_entry
          (long_module_name
            (module)))
        (imports_entry
          (long_module_name
            (module))
          (exposes_list
            (ident)))
        (imports_entry
          (long_module_name
            (module)))
        (imports_entry
          (long_module_name
            (module))
          (exposes_list
            (ident)))
        (imports_entry
          (long_module_name
            (module)))
        (imports_entry
          (long_module_name
            (module))))))
  (alias
    (apply_type
      (concrete_type))
    (type_annotation
      (apply_type
        (concrete_type))))
  (alias
    (apply_type
      (concrete_type))
    (type_annotation
      (apply_type
        (concrete_type))))
  (alias
    (apply_type
      (concrete_type))
    (type_annotation
      (apply_type
        (concrete_type))))
  (line_comment)
  (annotation
    (annotation_pre_colon)
    (type_annotation
      (function_type
        (apply_type
          (concrete_type))
        (arrow)
        (apply_type
          (concrete_type)
          (apply_type_args
            (apply_type_arg
              (apply_type
                (concrete_type)
                (apply_type_args
                  (apply_type_arg
                    (apply_type
                      (concrete_type))))))
            (apply_type_arg
              (tags_type
                (apply_type
                  (concrete_type)
                  (apply_type_args
                    (apply_type_arg
                      (apply_type
                        (concrete_type)
                        (apply_type_args
                          (apply_type_arg
                            (apply_type
                              (concrete_type)))))))))))))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (fun_expression
      (backslash)
      (argument_patterns
        (long_identifier
          (identifier)))
      (arrow)
      (long_identifier_or_op
        (long_identifier
          (identifier))))))

================================================================================
app header
================================================================================

platform "ruby-interop"
    requires {} { main : arg -> ret where arg implements Decoding, ret implements Encoding }
    exposes []
    packages {}
    imports [TotallyNotJson]
    provides [mainForHost]

main = 1
--------------------------------------------------------------------------------

(file
  (platform_header
    (name)
    (platform_header_body
      (requires
        (requires_rigids)
        (typed_ident
          (type_annotation
            (function_type
              (bound_variable)
              (arrow)
              (implements
                (ability_chain)
                (ability_chain))))))
      (exposes)
      (packages
        (record))
      (imports
        (imports_entry
          (long_module_name
            (module))))
      (provides
        (ident))))
  (value_declaration
    (value_declaration_left
      (identifier_pattern
        (long_identifier
          (identifier))))
    (const
      (int))))
