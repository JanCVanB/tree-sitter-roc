====
types
====
A: Int
B b: Type b
----

(file
  (alias_type_def
    (apply_type
      (concrete_type))
    (apply_type
      (concrete_type)))
  (alias_type_def
    (apply_type
      (concrete_type)
      (apply_type_arg
        (bound_variable)))
    (apply_type
      (concrete_type)
      (apply_type_arg
        (bound_variable)))))

====
types_def
====
a:Int
a=1

b: Int,Str->Str
b=|a,b| b
----

(file
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier
          (regular_ident)))
      (apply_type
        (concrete_type)))
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (const
        (int))))
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier
          (regular_ident)))
      (function_type
        (apply_type
          (concrete_type))
        (apply_type
          (concrete_type))
        (arrow)
        (apply_type
          (concrete_type))))
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier
              (regular_ident)))
          (identifier_pattern
            (identifier
              (regular_ident))))
        (expr_body
          (variable_expr
            (identifier
              (regular_ident))))))))

====
types_effectful
====
eff!:Int=>Int
eff! = ... 
----

(file
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier
          (effectful_ident)))
      (function_type
        (apply_type
          (concrete_type))
        (fat_arrow)
        (apply_type
          (concrete_type))))
    (decl_left
      (identifier_pattern
        (identifier
          (effectful_ident))))
    (expr_body
      (todo_expr))))

====
types_record_open
====
A rest:{a:Str,b:Str,..rest}
----

(file
  (alias_type_def
    (apply_type
      (concrete_type)
      (apply_type_arg
        (bound_variable)))
    (record_type
      (record_field_type
        (field_name
          (regular_ident))
        (apply_type
          (concrete_type)))
      (record_field_type
        (field_name
          (regular_ident))
        (apply_type
          (concrete_type)))
      (open_type_var
        (type_variable
          (bound_variable))))))

====
types_tag_open
====
A rest:[T1,T2 Str,..rest ]
----

(file
  (alias_type_def
    (apply_type
      (concrete_type)
      (apply_type_arg
        (bound_variable)))
    (tags_type
      (tag_type)
      (tag_type
        (apply_type_arg
          (apply_type
            (concrete_type))))
      (open_type_var
        (type_variable
          (bound_variable))))))
