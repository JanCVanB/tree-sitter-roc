================================================================================
value_decl
================================================================================
var= a
my_var= a
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (variable_expr
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (variable_expr
        (identifier
          (regular_ident))))))

================================================================================
value_decl_nested
================================================================================
var= a
var= 
	b=10
	b
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (variable_expr
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (value_declaration
        (decl_left
          (identifier_pattern
            (identifier
              (regular_ident))))
        (expr_body
          (const
            (int))))
      (variable_expr
        (identifier
          (regular_ident))))))

================================================================================
value_decl_typed
================================================================================
var:Int
var= a
var =
  p:Int
  p=10
  p
var =
  p:Int
  p=
    10
  p
--------------------------------------------------------------------------------

(file
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier
          (regular_ident)))
      (apply_type
        (concrete_type)))
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (variable_expr
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (value_declaration
        (annotation_type_def
          (annotation_pre_colon
            (identifier
              (regular_ident)))
          (apply_type
            (concrete_type)))
        (decl_left
          (identifier_pattern
            (identifier
              (regular_ident))))
        (expr_body
          (const
            (int))))
      (variable_expr
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (value_declaration
        (annotation_type_def
          (annotation_pre_colon
            (identifier
              (regular_ident)))
          (apply_type
            (concrete_type)))
        (decl_left
          (identifier_pattern
            (identifier
              (regular_ident))))
        (expr_body
          (const
            (int))))
      (variable_expr
        (identifier
          (regular_ident))))))

================================================================================
value_record
================================================================================

{ result: commaResult, rest: nextBytes } = comma beforeCommaOrBreak
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (record_pattern
        (record_field_pattern
          (field_name
            (regular_ident))
          (identifier_pattern
            (identifier
              (regular_ident))))
        (record_field_pattern
          (field_name
            (regular_ident))
          (identifier_pattern
            (identifier
              (regular_ident))))))
    (expr_body
      (function_call_expr
        (variable_expr
          (identifier
            (regular_ident)))
        (variable_expr
          (identifier
            (regular_ident)))))))

================================================================================
value_field
================================================================================
a= Bool.field
a= My.Module.field
a= {a}.field
a= ({a}).field
a= a.field.b.c.d
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (variable_expr
        (module)
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (variable_expr
        (module)
        (module)
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (field_access_expr
        (record_expr
          (record_field_expr
            (field_name
              (regular_ident))))
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (field_access_expr
        (parenthesized_expr
          (expr_body
            (record_expr
              (record_field_expr
                (field_name
                  (regular_ident))))))
        (identifier
          (regular_ident)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (regular_ident))))
    (expr_body
      (field_access_expr
        (variable_expr
          (identifier
            (regular_ident)))
        (identifier
          (regular_ident))
        (identifier
          (regular_ident))
        (identifier
          (regular_ident))
        (identifier
          (regular_ident))))))

================================================================================
value_ignore
================================================================================
_= a
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (wildcard_pattern))
    (expr_body
      (variable_expr
        (identifier
          (regular_ident))))))

================================================================================
value_shadowable
================================================================================
_shadow= a
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (shadowed_ident))))
    (expr_body
      (variable_expr
        (identifier
          (regular_ident))))))

================================================================================
value_effectful
================================================================================
effect! = |a| doThing! a
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (effectful_ident))))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier
              (regular_ident))))
        (expr_body
          (function_call_expr
            (variable_expr
              (identifier
                (effectful_ident)))
            (variable_expr
              (identifier
                (regular_ident)))))))))

================================================================================
value_effectful_shadowable
================================================================================
_effect! = |a| doThing! a
--------------------------------------------------------------------------------

(file
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier
          (effectful_ident))))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier
              (regular_ident))))
        (expr_body
          (function_call_expr
            (variable_expr
              (identifier
                (effectful_ident)))
            (variable_expr
              (identifier
                (regular_ident)))))))))
