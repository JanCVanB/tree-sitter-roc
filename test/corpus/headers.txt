====
header_app
====

app [main] { pf: platform "https://basic-cli" }

import pf.Stdout

main =
    Stdout.line! "Hello world"
---

(file
  (app_header
    (provides_list
      (ident))
    (packages_list
      (platform_ref
        (identifier)
        (package_uri))))
  (import_expr
    (identifier)
    (module))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (bang_expr
        (variable_expr
          (module)
          (identifier)))
      (const
        (string)))))

================================================================================
header_platform
================================================================================

platform "ruby-interop"
    requires {} { main : arg -> ret where arg implements Decode.Decoding, ret implements Encoding }
    exposes []
    packages {}
    imports [TotallyNotJson]
    provides [mainForHost]

main = 1
--------------------------------------------------------------------------------

(file
  (platform_header
    (name)
    (platform_header_body
      (requires
        (requires_rigids)
        (typed_ident
          (identifier)
          (function_type
            (bound_variable)
            (arrow)
            (where_implements
              (bound_variable)
              (where)
              (identifier)
              (implements)
              (ability_chain
                (module)
                (ability))
              (identifier)
              (implements)
              (ability_chain
                (ability))))))
      (exposes
        (exposes_list))
      (packages
        (record_pattern))
      (imports
        (imports_entry
          (module)))
      (provides
        (ident))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (const
        (int)))))

================================================================================
header_module
================================================================================

module [ReadErr, DeleteErr, DirEntry, deleteEmptyDir, deleteRecursive, list]
import other.Expect
import pf.Stdout exposing [line]
import pf.Task.Task  
import pf.Task.Task exposing [await]  
import other.Path exposing [Path]

AA: AA.BB
BB : AA.BB
CC : AA.BB


## com
a : A -> TASK (List Path) [DirReadErr Path ReadErr]
a = \path ->
  a

--------------------------------------------------------------------------------

(file
  (module_header
    (exposes_list
      (ident)
      (ident)
      (ident)
      (ident)
      (ident)
      (ident)))
  (import_expr
    (identifier)
    (module))
  (import_expr
    (identifier)
    (module)
    (exposing)
    (exposing
      (ident)))
  (import_expr
    (identifier)
    (module)
    (module))
  (import_expr
    (identifier)
    (module)
    (module)
    (exposing)
    (exposing
      (ident)))
  (import_expr
    (identifier)
    (module)
    (exposing)
    (exposing
      (ident)))
  (alias_type_def
    (apply_type
      (concrete_type))
    (apply_type
      (concrete_type)))
  (alias_type_def
    (apply_type
      (concrete_type))
    (apply_type
      (concrete_type)))
  (alias_type_def
    (apply_type
      (concrete_type))
    (apply_type
      (concrete_type)))
  (doc_comment)
  (annotation_type_def
    (annotation_pre_colon
      (identifier))
    (function_type
      (apply_type
        (concrete_type))
      (arrow)
      (apply_type
        (concrete_type)
        (apply_type_args
          (apply_type_arg
            (parenthesized_type
              (apply_type
                (concrete_type)
                (apply_type_args
                  (apply_type_arg
                    (apply_type
                      (concrete_type)))))))
          (apply_type_arg
            (tags_type
              (apply_type
                (concrete_type)
                (apply_type_args
                  (apply_type_arg
                    (apply_type
                      (concrete_type)
                      (apply_type_args
                        (apply_type_arg
                          (apply_type
                            (concrete_type))))))))))))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (backslash)
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (arrow)
        (expr_body
          (variable_expr
            (identifier)))))))

====
header_file_import
====

module [test]
import "myfile.txt" as file:Str
----

(file
  (module_header
    (exposes_list
      (ident)))
  (import_file_expr
    (string)
    (identifier)
    (concrete_type)))

====
header_package
====
package [ParserCore, ParserCsv, ParserStr] {
    json: "https://…/json/…",
    unicode: "https://…/unicode/…",
}
main=10
----

(file
  (package_header
    (provides_list
      (ident)
      (ident)
      (ident))
    (packages_list
      (package_ref
        (identifier)
        (string))
      (package_ref
        (identifier)
        (string))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (const
        (int)))))
